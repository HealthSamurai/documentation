apiVersion: batch/v1
kind: CronJob
metadata:
  name: meilisearch-reindex-fhirbase
  namespace: gitbok
spec:
  schedule: "30 * * * *"  # Every hour at 30 minutes (offset from docs)
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: docs-scraper
            image: getmeili/docs-scraper:latest
            env:
            - name: MEILISEARCH_HOST_URL
              value: "http://meilisearch.gitbok.svc.cluster.local:7700"
            - name: MEILISEARCH_API_KEY
              valueFrom:
                secretKeyRef:
                  name: meilisearch-secret
                  key: master-key
            - name: INDEX_NAME
              value: "fhirbase"
            volumeMounts:
            - name: config
              mountPath: /docs-scraper/config.json
              subPath: config.json
            command: ["/bin/sh", "-c"]
            args:
            - |
              set -e
              echo "Starting reindexing for index: $INDEX_NAME"

              # 1. Run scraper to populate temp index
              echo "Running docs-scraper to populate ${INDEX_NAME}_temp..."
              pipenv run ./docs_scraper config.json

              # 2. Check if indexes exist
              MAIN_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
                -H "Authorization: Bearer $MEILISEARCH_API_KEY" \
                "$MEILISEARCH_HOST_URL/indexes/$INDEX_NAME")

              TEMP_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
                -H "Authorization: Bearer $MEILISEARCH_API_KEY" \
                "$MEILISEARCH_HOST_URL/indexes/${INDEX_NAME}_temp")

              echo "Index status: $INDEX_NAME=$MAIN_EXISTS, ${INDEX_NAME}_temp=$TEMP_EXISTS"

              # 3. Create empty main index if it doesn't exist
              if [ "$MAIN_EXISTS" != "200" ]; then
                echo "Creating empty index: $INDEX_NAME"
                curl -X POST "$MEILISEARCH_HOST_URL/indexes" \
                  -H "Authorization: Bearer $MEILISEARCH_API_KEY" \
                  -H "Content-Type: application/json" \
                  -d "{\"uid\": \"$INDEX_NAME\", \"primaryKey\": \"objectID\"}"
                sleep 2
              fi

              # 4. Swap indexes if temp exists
              if [ "$TEMP_EXISTS" = "200" ]; then
                echo "Swapping indexes: $INDEX_NAME <-> ${INDEX_NAME}_temp"
                SWAP_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST "$MEILISEARCH_HOST_URL/swap-indexes" \
                  -H "Authorization: Bearer $MEILISEARCH_API_KEY" \
                  -H "Content-Type: application/json" \
                  -d "[{\"indexes\": [\"$INDEX_NAME\", \"${INDEX_NAME}_temp\"]}]")

                SWAP_CODE=$(echo "$SWAP_RESPONSE" | grep "HTTP_CODE:" | cut -d':' -f2)
                if [ "$SWAP_CODE" != "202" ] && [ "$SWAP_CODE" != "200" ]; then
                  echo "Error: Swap failed with code $SWAP_CODE"
                  echo "Response: $(echo "$SWAP_RESPONSE" | grep -v "HTTP_CODE:")"
                  exit 1
                fi

                sleep 2

                # 5. Delete old temp index
                echo "Deleting old temp index: ${INDEX_NAME}_temp"
                curl -X DELETE "$MEILISEARCH_HOST_URL/indexes/${INDEX_NAME}_temp" \
                  -H "Authorization: Bearer $MEILISEARCH_API_KEY"

                echo "Reindexing completed successfully for $INDEX_NAME"
              else
                echo "Error: Temp index ${INDEX_NAME}_temp was not created"
                exit 1
              fi
          volumes:
          - name: config
            configMap:
              name: meilisearch-scraper-config-fhirbase